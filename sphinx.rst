.. _sphinx:

##########################
Introduction:  Sphinx docs
##########################


This "book" is a brief review of the most common things I do from the command line on OS X.  I call it **MyUnix** because it really is (almost) Unix at this level, and because my other projects on github are named like *MyX*.

It seems a little hokey sometimes, but it's probably too late to change now.

We will start with Unix in the next chapter.  Some of what's in this chapter may not make sense until we get there.  But first, a word about Sphinx.

If you come across this book on github:

https://github.com/telliott99/MyUnix

you can follow these instructions to generate the html for yourself.

The Sphinx project aims to make it easier to produce documentation.  It is what I am using to write this book.

http://sphinx-doc.org

You can install it with:

.. sourcecode:: bash

    > easy_install -U Sphinx

Start a new project with:

.. sourcecode:: bash

    > sphinx-quickstart

**Overview**

Inside the project directory there is a file ``index.rst``.  The ``rst`` stands for *restructured text*.  The file is initially generated by ``sphinx-quickstart``.

It contains a ``toctree`` which lists the order in which files defining chapters should be included in the book.  At an early stage that list looked like:

.. sourcecode:: rst

    .. toctree::
       :maxdepth: 2

       unix1-navigation
       unix2-files
       unix3-permissions
       unix-advanced1

If you have Sphinx installed and you obtain this book from my Git repository (git repo):

https://github.com/telliott99/MyUnix

You can "build" the html pages by doing:

.. sourcecode:: rst

    > cd Desktop/
    > cd MyUnix/
    > make html
    sphinx-build -b html -d _build/doctrees   . _build/html
    Running Sphinx v1.3b3
    loading pickled environment... done
    building [mo]: targets for 0 po files that are out of date
    building [html]: targets for 1 source files that are out of date
    updating environment: 0 added, 1 changed, 0 removed
    reading sources... [100%] index                             
    looking for now-outdated files... none found
    pickling environment... done
    checking consistency... done
    preparing documents... done
    writing output... [100%] index                              
    generating indices... genindex
    writing additional pages... search
    copying static files... done
    copying extra files... done
    dumping search index in English (code: en) ... done
    dumping object inventory... done
    build succeeded.

    Build finished. The HTML pages are in _build/html.
    > open -a Preview _build/html/index.html 
    > 

It can happen that partially built stuff with an error may not show the error when you do ``make html`` again.  In that case, you can start by doing ``make clean``.  The actions that ``make`` takes are defined in a ``Makefile`` in the project, also produced by the setup script.  For example, ``make clean`` is defined:

.. sourcecode:: bash

    clean:
    	rm -rf $(BUILDDIR)/*

One purpose of this book is to understand what such instructions mean.

Sphinx shows you what it's doing.  The actual invocation would look like this:

.. sourcecode:: bash

    > make clean
    rm -rf _build/*
    >

**Restructured text**

Here is a primer on restructured text.

http://sphinx-doc.org/rest.html#rst-primer

and here is a list of directives:

http://docutils.sourceforge.net/docs/ref/rst/directives.html

It is designed to be easy to write the markup as you are entering new text.  Images, math, and scripts are included with directives like:

.. sourcecode:: rst

    .. image:: /figs/gitignore_window.png
       :scale: 50 %

.. note::

   Here is a "note".

A note is an "admonition", others include:  ``attention``, ``hint``, ``tip``, ``warning``, and more.
   
Here is some inline math:  :math:`a^2 + b^2 = c^2`.

And not inline:

.. math::

    φ(n) = (p − 1)(q − 1)

http://sphinx-doc.org/ext/math.html

Every page generated by Sphinx (like this one) will have a link in the sidebar that says ``Show Source``.  It's a great way to see how restructured text documents are put together.

Here is a copy of that link (or look for it):

file:///Users/telliott_admin/Desktop/MyUnix/_build/html/_sources/sphinx.txt

**Links**

.. sourcecode:: rst

    .. _my-reference-label:

    Section to cross-reference
    --------------------------

    This is the text of the section.

    It refers to the section itself, see :ref:`my-reference-label`.
    
    alt:  :ref:`title<my-reference-label>`

    Using ref is advised over standard reStructuredText links to sections (like `Section title`_) because it works across files, when section headings are changed, and for all builders that support cross-references.
    
To link to a static file contained in the project, do something like:

.. sourcecode:: rst

    :download:`resources.html </_static/unix_resources.html>`

**Code highlighting**

Snippets from the interpreter should be aligned with the left-hand margin (not indented).

>>> def f(s):
...     if True:
...         print s
...     else:
...         print "not", s
... 
>>>

The instructions say not to include a final ``>>>`` prompt.  But I like it here.

Source code copied from a file:

.. sourcecode:: python

    def f(s):
        if True:
            print s
        else:
            print "not", s

I can turn on line numbers:

.. sourcecode:: python
   :linenos:

    def f(s):
        if True:
            print s
        else:
            print "not", s

There is also a directive ``:emphasize-lines: 3,5`` to emphasize particular lines.



